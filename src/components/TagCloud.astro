---
import testTags from '../data/testTags.json';

const { showButton } = Astro.props;
---

<div id="tags-wrapper">
  {
    testTags.map((tag, index) => (
      <span
        class={`tag-wrapper font-hgv-regular ${index > 2 ? 'is-hidden' : ''}`}
      >
        <a class="tag" href={`/${tag}`}>
          {tag}
        </a>
      </span>
    ))
  }
  <button
    id="tags-button"
    class=`font-hgv-regular ${showButton ? '' : 'is-hidden'}`
  >
    show more
  </button>
  <button id="hide-tags-button" class="font-hgv-regular is-hidden">
    show less
  </button>
</div>

<script>
  document.querySelector('#tags-button').addEventListener('click', () => {
    document.querySelectorAll('.tag-wrapper').forEach((tag) => {
      if (tag.classList.contains('is-hidden')) {
        tag.classList.remove('is-hidden');
      }
    });
    document.querySelector('#tags-button').classList.add('is-hidden');
    document.querySelector('#hide-tags-button').classList.remove('is-hidden');
  });
  document.querySelector('#hide-tags-button').addEventListener('click', () => {
    document.querySelectorAll('.tag-wrapper').forEach((tag, index) => {
      if (index > 2) {
        tag.classList.add('is-hidden');
      }
    });
    document.querySelector('#tags-button').classList.remove('is-hidden');
    document.querySelector('#hide-tags-button').classList.add('is-hidden');
  });
</script>

<style lang="scss">
  .tag-wrapper {
    padding: 5px 10px;
    border: var(--color-bg-secondary) solid 1px;
    border-radius: 20px;
    font-size: var(--font-size-xs);
    line-height: 100%;
    transition: border-color 0.3s;

    &:hover,
    &:focus {
      border-color: var(--color-primary);
    }
  }

  .tag {
    text-decoration: none;
    color: var(--color-primary);
  }

  #tags-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
  }

  #tags-button,
  #hide-tags-button {
    border: none;
    background: none;
    font-size: var(--font-size-xs);
    line-height: 100%;
    transition: color 0.3s;

    &:hover,
    &:focus {
      cursor: pointer;
      color: var(--color-secondary);
    }
  }
</style>
