---
import { getCollection } from 'astro:content';
import { generateUniqueTags } from '@utils/scripts';
import WidgetLayout from '@layouts/WidgetLayout.astro';

const posts = await getCollection('posts');
const tags: { title: string; url: string }[] = generateUniqueTags(posts);

const tagClassList = (index: number): string => {
  return index > 4 ? 'global-tag hidden' : 'global-tag';
};

const showButton: boolean = tags.length > 5;
---

<WidgetLayout>
  <h3 slot="title" class="title font-hgv-uppercase">Tags</h3>
  <ul slot="content" class="content" role="list">
    {
      tags.map((tag: { title: string; url: string }, index: number) => (
        <li class={tagClassList(index)}>
          <a class="tag font-hgv-regular" href={tag.url}>
            {tag.title}
          </a>
        </li>
      ))
    }
    <li class={showButton ? '' : 'hidden'}>
      <button id="tags-button" class="button--default font-hgv-regular"
        >show more</button
      >
    </li>
  </ul>
</WidgetLayout>

<script>
  const button = document.getElementById('tags-button');
  let tagsAreShown: boolean = false;
  button?.addEventListener('click', () => {
    if (button && tagsAreShown == false) {
      document.querySelectorAll('.global-tag').forEach((tag: HTMLElement) => {
        if (tag.classList.contains('hidden')) {
          tag.classList.remove('hidden');
        }
      });
      button.innerHTML = 'show less';
    } else if (button && tagsAreShown == true) {
      document
        .querySelectorAll('.global-tag')
        .forEach((tag: HTMLElement, index: number) => {
          if (index > 4) {
            tag.classList.add('hidden');
          }
        });
      button.innerHTML = 'show more';
    }
    tagsAreShown = !tagsAreShown;
  });
</script>

<style lang="scss">
  .title {
    font-size: var(--font-size-xs);
  }

  .content {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
  }

  #tags-button {
    font-size: var(--font-size-xs);
    line-height: 100%;
    transition: color 0.3s;
    padding: 5px 0;

    &:hover,
    &:focus {
      color: var(--color-secondary);
    }
  }

  .tag {
    display: block;
    padding: 5px 10px;
    border: var(--color-bg-secondary) solid 1px;
    border-radius: 20px;
    text-decoration: none;
    color: var(--color-primary);
    font-size: var(--font-size-xs);
    line-height: 100%;
    transition: border-color 0.3s;

    &:hover,
    &:focus {
      border-color: var(--color-primary);
    }
  }
</style>
